DSA Class notes - 3 ------- 11/04/2022
------------------------------------------------------
// Implementing multiple stack in a single array-
n = 9, int s[n], no of stack = m = 3
size of each stack = n/m = 9/3 = 3
stack 0 ,stack 1, stack 2
___________________________
|_______|_______|_________|

1. underflow condition
top of i = (i * n/m) - 1

2. overflow condition
top of i = ((i+1) * n/m) - 1

------------------------------------------------------------
// Function to push element
void Push (s, n, m, TopI, i, x){
    if ( TopI == ((i+1) * n/m)-1) ){
        printf("overflow condition!);
        exit(1);
    }
    else {
        topI++;
        s[TopI] = x;
        // s[++TopI] = x; // Can be written in 1 line
    }
}


--------------------------------------------------------------------
// Function to pop element
int Pop (s, n, m, TopI, I){
    if (topI == (i * n/m) - 1) ){
        printf("underflow condition!");
        exit(1);
    }
    else {
        int x;
        x = s[TopI];
        TopI--;
        return x;
        // return s[TopI--]; // 4 above lines can be written in 1 line
    }
}
-------------------------------------------------------------------

------- Limitation of multiple stacks ------
say it one of the stacks (say stack m) is full (overflow condition), and
another stack is not full (say stack n). Now if we want to enter element
in stack in stack m there is no space, but stack n has space left. So this
is a problem. This problem can be taken care of using 2 stack method
Shown below

---------------------------------------------------------------------
Implementing multiple - 2 stack in a single array
               _______________________________
left stack  TL |__|__|__|__|__|__|__|__|__|__| TR Right stack
------------------->                      <-------------------
TL = Top of left stack
TR = Top of Right stack

------------------------------------------------------------------------


overflow condition: TR - TL = 1
underflow condition TL = -1 OR TR == size of array (or stack)

// PUSH
------ PUSH TC -----
TL = TL + 1
S[TL] = x
------ PUSH TR ------
TR = TR - 1
s[TR] = x

// Pop
------- POP TL -------
x = s[TL];
TL = TL - 1;
------- POP TR -------
x = s[TR];
TR = TR + 1;
---------------------------------------------------------------------------